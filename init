#! /bin/sh
IPFS_HOST="127.0.0.1"
IPFS_PORT="5001"

IPFS_GATEWAY_HOST="$IPFS_HOST:$IPFS_PORT"

echo $@

RUNTIME_CONFIG=$1
OUTPUT_DEV=$4
DATA_DEV=$3
PREV_OUTPUT_CID_BLOCKDEV=$2
METADATA_DEV=$5

if [ "$RUNTIME_CONFIG" = "qemu" ]; then
  ARCH=amd64
else
  ARCH=riscv64
fi

ARCH_PATH="/opt/$ARCH/bin"

echo "====================== TOSI STANDARD LOADER - STAGE 2 ========"
echo

mount -t tmpfs tmpfs /tmp

export HOME=/root

PREV_OUTPUT_SIZE_HEX=$(dd if=$METADATA_DEV bs=32 count=1 | xxd -ps -c 32)
echo "PREV $PREV_OUTPUT_SIZE_HEX"
PREV_OUTPUT_SIZE=$((0x${PREV_OUTPUT_SIZE_HEX}))
INPUT_SIZE_HEX=$(dd if=$METADATA_DEV bs=32 count=1 skip=1 | xxd -ps -c 32)
echo "INPUT $INPUT_SIZE_HEX"
INPUT_SIZE=$((0x${INPUT_SIZE_HEX}))

# start up ipfs
cp -r /opt/ipfs /root/.ipfs
mkdir -p /root/.bin
echo "Copying IPFS binary in.."
cp $ARCH_PATH/ipfs /root/.bin/

echo "Importing previous output DAG"
# XXX this should be improved
echo "DD'ing out file"
dd if=$PREV_OUTPUT_CID_BLOCKDEV bs=1048576 count=$(( (${PREV_OUTPUT_SIZE} / 1048576) + 1 )) of=/root/previous.car
truncate -s $PREV_OUTPUT_SIZE /root/previous.car

echo "Importing prev car file"
PREV_OUTPUT_CID=$(IPFS_PATH=/root/.ipfs /root/.bin/ipfs --offline dag import /root/previous.car | grep "Pinned root" | cut -f 2)
rm -f /root/previous.car

echo "Importing data dev"
dd if=$DATA_DEV bs=1048576 count=$(( (${INPUT_SIZE} / 1048576) + 1 )) of=/root/data.car
truncate -s $INPUT_SIZE /root/data.car

echo "dag importing"
INPUT_CID=$(IPFS_PATH=/root/.ipfs /root/.bin/ipfs --offline dag import /root/data.car | grep "Pinned root" | cut -f 2)
rm -f /root/data.car

echo "Adding input to MFS"
IPFS_PATH=/root/.ipfs /root/.bin/ipfs --offline files cp /ipfs/$INPUT_CID /input
echo "Adding state to MFS"
IPFS_PATH=/root/.ipfs /root/.bin/ipfs --offline files cp /ipfs/$PREV_OUTPUT_CID /state

echo "Done importing"

mkdir -p /root/contract

echo "Extracting contract squashfs"

if [ x$PREV_OUTPUT_CID == xbafybeiczsscdsbs7ffqz55asqdf3smv6klcw3gofszvwlyarci47bgf354 ]; then
	STAGE2_CID=$INPUT_CID
	echo "First boot - preserving boot loader in /state/boot"
	IPFS_PATH=/root/.ipfs /root/.bin/ipfs --offline files cp /ipfs/$INPUT_CID/boot /state/boot
else
	STAGE2_CID=$PREV_OUTPUT_CID
fi

IPFS_PATH=/root/.ipfs /root/.bin/ipfs --offline get -o /root/contract.squashfs $STAGE2_CID/boot/contract.squashfs

echo "Extracting contract"
mkdir -p /root/contract-tmp
mount -t squashfs -o ro /root/contract.squashfs /root/contract-tmp
cp -r /root/contract-tmp/. /root/contract/
umount /root/contract-tmp
rm -f /root/contract.squashfs

mkdir -p /root/contract/dev /root/contract/proc /root/contract/sys
mount --bind /dev /root/contract/dev
mount --bind /sys /root/contract/sys
mount --bind /proc /root/contract/proc


echo "Starting IPFS"
IPFS_PATH=/root/.ipfs /root/.bin/ipfs daemon --offline &

echo "Waiting for IPFS"
while true; do 
    nc -z "$IPFS_HOST" "$IPFS_PORT"
    RET=$?
    echo $RET
    if [ x$RET = x0 ]; then
      break
    fi
    sleep 1
done
echo "IPFS up"

echo "Starting up contract.."
HOME=/root IPFS_API="/ip4/127.0.0.1/tcp/5001" chroot /root/contract /init
PROCESS_RETURN_CODE=$?
OUTPUT_CID=$(IPFS_PATH=/root/.ipfs /root/.bin/ipfs files stat --hash /state)
if [ $PROCESS_RETURN_CODE != 0 ]; then
	echo "RETURN_STATUS: $PROCESS_RETURN_CODE - OUTPUT_CID: $OUTPUT_CID"
	echo "non-zero status received, previous output CID becomes new output CID"
	OUTPUT_CID=$PREV_OUTPUT_CID
fi

IPFS_PATH=/root/.ipfs /root/.bin/ipfs get -o /tmp/output.file  $OUTPUT_CID/output.file

touch /tmp/output.file

OUTPUT_SHA256=$(sha256sum /tmp/output.file | cut -d " " -f 1)

printf "%s\0%s\0" $OUTPUT_CID $OUTPUT_SHA256 > /tmp/pre-sha256
SHA256=$(sha256sum /tmp/pre-sha256 | cut -d " " -f -1)
echo -n $SHA256 | xxd -r -p > $OUTPUT_DEV

# no need to do this in court
if [ "$RUNTIME_CONFIG" = "qemu" ]; then
   IPFS_PATH=/root/.ipfs /root/.bin/ipfs dag export $OUTPUT_CID > /root/output.car
fi

echo "Done, halting..."

/bin/sync

if [ "$RUNTIME_CONFIG" = "qemu" ]; then
  exec /sbin/reboot -f
else 
  exec /sbin/halt -f
fi
